package sea.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import sea.handlers.UserRepository;
import sea.models.User;

@CrossOrigin(origins = "http://localhost:4200")
@Controller // This means that this class is a Controller
@RequestMapping(path = "/sea/users") // This means URL's start with /demo (after
										// Application path)
public class UsersController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser(@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view
		// name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path = "")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(path = "/{id}")
	public @ResponseBody User getUserByID(@PathVariable int id) {
		// This returns a JSON or XML with the users
		return userRepository.findById(id).get();
	}

	// update user
	@PutMapping(path = "/{id}")
	public @ResponseBody User updateUserByID(@RequestBody User user) {
		// This returns a JSON or XML with the users
		return userRepository.save(user);
	}

	// create user
	@PostMapping(path = "")
	public @ResponseBody User createUser(@RequestBody User user) {
		// This returns a JSON or XML with the users
		return userRepository.save(user);
	}

	// delete user
	@DeleteMapping(path = "/{id}")
	public @ResponseBody String deleteUserByID(@PathVariable int id) {
		// This returns a JSON or XML with the users
		try {
			userRepository.deleteById(id);
		} catch (IllegalArgumentException err) {
			return "NOK";
		}
		return "OK";
	}

}
