package sea;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import sea.User;
import sea.UserRepository;

class EventUsers {
	List<User> participants;
	List<User> noparticipants;

	public EventUsers(UserRepository userRepository, EventRepository eventRepository, int eventId) {
		participants = eventRepository.findById(eventId).get().getUsers();

		// Recupere les ID des participants
		List<Integer> parInt = new ArrayList<Integer>();
		participants.forEach(new Consumer<User>() {

			@Override
			public void accept(User u) {
				parInt.add(u.getId());
			}
		});

		noparticipants = new ArrayList<User>();

		userRepository.findAll().forEach(new Consumer<User>() {

			@Override
			public void accept(User u) {
				if (!parInt.contains(u.getId())) {
					noparticipants.add(u);
				}

			}
		});
	}

	public List<User> getParticipants() {
		return participants;
	}

	public void setParticipants(List<User> participants) {
		this.participants = participants;
	}

	public List<User> getNoparticipants() {
		return noparticipants;
	}

	public void setNoparticipants(List<User> noparticipants) {
		this.noparticipants = noparticipants;
	}
	
	
	
}

@CrossOrigin(origins = "http://localhost:4200")
@Controller    // This means that this class is a Controller
@RequestMapping(path="/sea") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private EventRepository eventRepository;
	
	@PostConstruct
	  public void init(){
		loadData();
	  }

	@GetMapping(path="/users/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/users")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/users/{id}")
	public @ResponseBody User getUserByID(@PathVariable int id) {
		// This returns a JSON or XML with the users
		return userRepository.findById(id).get();
	}
	
	@GetMapping(path="/events")
	public @ResponseBody Iterable<Event> getAllEvents() {
		// This returns a JSON or XML with the users
		return eventRepository.findAll();
	}
	
	@GetMapping(path="/events/{id}")
	public @ResponseBody Event getEventByID(@PathVariable int id) {
		// This returns a JSON or XML with the users
		return eventRepository.findById(id).get();
	}
	
	@PostMapping(path="/events")
	public @ResponseBody Event createEvent(@RequestBody Event event) {
		// This returns a JSON or XML with the users
		return eventRepository.save(event);
	}
	
	@PutMapping(path="/events/{id}")
	public @ResponseBody Event updateEventByID(@RequestBody Event event) {
		// This returns a JSON or XML with the users
		return eventRepository.save(event);
	}
	
	@DeleteMapping(path="/events/{id}")
	public @ResponseBody String deleteEventByID(@PathVariable int id) {
		// This returns a JSON or XML with the users
		try{
		eventRepository.deleteById(id);
		}catch(IllegalArgumentException err){
			return "NOK";
		}
		return "OK";
	}
	
	@GetMapping(path="/events/{id}/participants")
	public @ResponseBody EventUsers getUsersOfEvent(@PathVariable int id) {
		EventUsers evU = new EventUsers(userRepository, eventRepository, id);
		return evU;
	}
	
	//update user
	@PutMapping(path="/users/{id}")
	public @ResponseBody User updateUserByID(@RequestBody User user) {
		// This returns a JSON or XML with the users
		return userRepository.save(user);
	}
	
	//create user
	@PostMapping(path="/users")
	public @ResponseBody User createUser(@RequestBody User user) {
		// This returns a JSON or XML with the users
		return userRepository.save(user);
	}
	
	//delete user
	@DeleteMapping(path="/users/{id}")
	public @ResponseBody String deleteUserByID(@PathVariable int id) {
		// This returns a JSON or XML with the users
		try{
		userRepository.deleteById(id);
		}catch(IllegalArgumentException err){
			return "NOK";
		}
		return "OK";
	}
	
	@GetMapping(path="/loadData") // Map ONLY GET Requests
	public @ResponseBody String loadData () {
		
		//Creation des utilisateurs
		User u1,u2,u3;
		
		u1=new User();
		u2=new User();
		u3=new User();
		
		u1.setName("User 1");
		u2.setName("User 2");
		u3.setName("User 3");
		
		ArrayList<User>listU=new ArrayList<User>();
		listU.add(u1);
		listU.add(u2);
		listU.add(u3);
		
		userRepository.saveAll(listU);
		
		//Creation des evenements
		
		Event e1,e2,e3;
		e1=new Event();
		e2=new Event();
		e3=new Event();
		
		e1.setName("Event 1");
		e1.setStartDate("2018-03-10 15:00:00");
		e1.setEndDate("2018-03-10 16:00:00");
		e1.setDescription("Couscous party");
		
		e2.setName("Event 2");
		e2.setStartDate("2018-03-11 14:00:00");
		e2.setEndDate("2018-03-11 16:00:00");
		e2.setDescription("baby foot");
		
		e3.setName("Event 3");
		e3.setStartDate("2018-03-16 10:00:00");
		e3.setEndDate("2018-03-16 12:00:00");
		e3.setDescription("perles");
		
		//liens
		e1.addUser(u2);
		e1.addUser(u3);
		
		e2.addUser(u1);
		
		e3.addUser(u3);
		
		ArrayList<Event>list=new ArrayList<Event>();
		list.add(e1);
		list.add(e2);
		list.add(e3);
		
		eventRepository.saveAll(list);
		return "Data loaded";
	}
	
	@GetMapping(path="/detach") // Map ONLY GET Requests
	public @ResponseBody String detach () {
		
		
		Optional<Event> event = eventRepository.findById(1);
		String s ="no detach";
		
		if(event.isPresent()) {
			   Event e = event.get();
			   e.clearUsers();
			   eventRepository.save(e);
			   s="detach";
			}
		
		
		return s;
	}
}