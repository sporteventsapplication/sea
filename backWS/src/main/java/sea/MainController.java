package sea;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import sea.User;
import sea.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/sea") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private EventRepository eventRepository;

	@GetMapping(path="/users/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/users")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/events")
	public @ResponseBody Iterable<Event> getAllEvents() {
		// This returns a JSON or XML with the users
		return eventRepository.findAll();
	}
	
	@GetMapping(path="/loadData") // Map ONLY GET Requests
	public @ResponseBody String loadData () {
		
		Event n = new Event();
		n.setName("Event 1");
		
		User u1 = new User();
		User u2 = new User();
		
		u1.setName("User 1");
		u2.setName("User 2");
		
		n.addUser(u1);
		n.addUser(u2);
		
		//userRepository.save(n);
		eventRepository.save(n);
		return "Data loaded";
	}
	
	@GetMapping(path="/detach") // Map ONLY GET Requests
	public @ResponseBody String detach () {
		
		
		Optional<Event> event = eventRepository.findById(1);
		String s ="no detach";
		
		if(event.isPresent()) {
			   Event e = event.get();
			   e.clearUsers();
			   eventRepository.save(e);
			   s="detach";
			}
		
		
		return s;
	}
}